// automatically generated by the FlatBuffers compiler, do not modify

package teleporter.integration.cluster.rpc.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class LinkInstance extends Table {
    public static LinkInstance getRootAsLinkInstance(ByteBuffer _bb) {
        return getRootAsLinkInstance(_bb, new LinkInstance());
    }

    public static LinkInstance getRootAsLinkInstance(ByteBuffer _bb, LinkInstance obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public LinkInstance __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
        return this;
    }

    public String instance() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer instanceAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public String broker() {
        int o = __offset(6);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer brokerAsByteBuffer() {
        return __vector_as_bytebuffer(6, 1);
    }

    public String ip() {
        int o = __offset(8);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer ipAsByteBuffer() {
        return __vector_as_bytebuffer(8, 1);
    }

    public int port() {
        int o = __offset(10);
        return o != 0 ? bb.getInt(o + bb_pos) : 0;
    }

    public long timestamp() {
        int o = __offset(12);
        return o != 0 ? bb.getLong(o + bb_pos) : 0;
    }

    public static int createLinkInstance(FlatBufferBuilder builder,
                                         int instanceOffset,
                                         int brokerOffset,
                                         int ipOffset,
                                         int port,
                                         long timestamp) {
        builder.startObject(5);
        LinkInstance.addTimestamp(builder, timestamp);
        LinkInstance.addPort(builder, port);
        LinkInstance.addIp(builder, ipOffset);
        LinkInstance.addBroker(builder, brokerOffset);
        LinkInstance.addInstance(builder, instanceOffset);
        return LinkInstance.endLinkInstance(builder);
    }

    public static void startLinkInstance(FlatBufferBuilder builder) {
        builder.startObject(5);
    }

    public static void addInstance(FlatBufferBuilder builder, int instanceOffset) {
        builder.addOffset(0, instanceOffset, 0);
    }

    public static void addBroker(FlatBufferBuilder builder, int brokerOffset) {
        builder.addOffset(1, brokerOffset, 0);
    }

    public static void addIp(FlatBufferBuilder builder, int ipOffset) {
        builder.addOffset(2, ipOffset, 0);
    }

    public static void addPort(FlatBufferBuilder builder, int port) {
        builder.addInt(3, port, 0);
    }

    public static void addTimestamp(FlatBufferBuilder builder, long timestamp) {
        builder.addLong(4, timestamp, 0);
    }

    public static int endLinkInstance(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }
}

